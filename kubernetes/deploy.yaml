apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  labels:
    app: mongodb
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongodb-pv
  annotations:
spec:
  capacity:
    storage: 10Gi
  persistentVolumeReclaimPolicy: Retain
  accessModes:
  - ReadWriteOnce
  nfs:
    server: g-k8s-master.isu.mosl
    path: /home/isu/gomosil/nfs_dir
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
spec:
  volumeName: mongodb-pv
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
spec:
  selector:
    matchLabels:
      app: mongodb
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:4.4
          ports:
            - containerPort: 27017
              name: mongodb
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
      volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  selector:
    matchLabels:
      app: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: g-docker-reg.isu.mosl/g-backend
          ports:
            - containerPort: 5001
              name: backend
          env:
            - name: MONGO_DB_URL
              value: "mongodb-service"
            - name: MONGO_DB_PORT
              value: "27017"
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  labels:
    app: backend
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 5001
      targetPort: 5001
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  selector:
    matchLabels:
      app: frontend
  replicas: 1
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: g-docker-reg.isu.mosl/g-frontend
          # We have some issues with webpack which is detected as completed.
          # Check https://github.com/facebook/create-react-app/issues/8688
          # For stdin and tty, check https://stackoverflow.com/questions/37559704/
          command: ["/bin/bash", "-c", "echo CI=true > .env && npm start"]
          stdin: true 
          tty: true
          ports:
            - containerPort: 3000
              name: frontend
          env:
            - name: REACT_APP_BACKEND_URL
              value: "http://backend-service:5001"
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  labels:
    app: frontend
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP
